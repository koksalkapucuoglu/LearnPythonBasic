import sys
import os

from PyQt5.QtWidgets import QWidget,QApplication,QTextEdit,QLabel,QPushButton,QVBoxLayout,QFileDialog,QHBoxLayout

from PyQt5.QtWidgets import QApplication, QAction, qApp, QMainWindow

class Notepad(QWidget):
    def __init__(self):

        super().__init__()#Qwidget tüm özelliklerini dahil eder.

        self.init_ui()#Başlangıç kullanıcı arayüzü fonksiyonunu çalıştırır.

    def init_ui(self):
        self.yazi_alani = QTextEdit()#büyük yazi alanı oluşturur.

        self.temizle = QPushButton("Temizle")
        self.ac = QPushButton("Aç")
        self.kaydet = QPushButton("Kaydet")

        h_box = QHBoxLayout()

        h_box.addWidget(self.temizle)
        h_box.addWidget(self.ac)
        h_box.addWidget(self.kaydet)#butonları yatay bir şekilde diz.

        v_box = QVBoxLayout()

        v_box.addWidget(self.yazi_alani)
        v_box.addLayout(h_box)#yazi alanı ve yatay alanı dik bir şekilde diz.

        self.setLayout(v_box)

        self.setWindowTitle("Notepad")

        self.temizle.clicked.connect(self.yaziyi_temizle)
        self.ac.clicked.connect(self.dosya_ac)
        self.kaydet.clicked.connect(self.dosya_kaydet)


        #self.show() notepad'i ana pencereye ekleyip, ana pencereyi açtığımız için burada ekstra açma kullanmaya gerek yok.

    def yaziyi_temizle(self):
        self.yazi_alani.clear()#yazı alanı içeriğini temizler.


    def dosya_ac(self):

        dosya_ismi = QFileDialog.getOpenFileName(self,"Dosya Aç",os.getenv("HOME"))
        #ilk değer Qwidget(self),sonra pencere ismi,sonra bilgisayarda işlemin olmasını istediğimiz dizin.


        #print(dosya_ismi) => ('C:/Users/maxwera/Desktop/Python Dosyalar/PyQt5 Dersleri/python.txt', 'All Files (*)')
        # print(dosya_ismi)#dosya ismi değişkeni bir demettir ve bu  demetin ilk değeri de dosya ismimizdir.
        with open(dosya_ismi[0],"r") as file:
            self.yazi_alani.setText(file.read())




    def dosya_kaydet(self):
        dosya_ismi = QFileDialog.getSaveFileName(self,"Dosya Kaydet",os.getenv("HOME"))

        with open(dosya_ismi[0],"w") as file:

            file.write(self.yazi_alani.toPlainText())#toPlain = yazi alanındaki tüm içerik


class Menu(QMainWindow):
    def __init__(self):

        super().__init__()

        self.pencere = Notepad() #Notepad'den bir pencere oluşturduk.

        self.setCentralWidget(self.pencere)#Ortaya pencere widget'ını ekliyoruz. Böylece bu pencereyi ana pencereye(menu'ye) ekledik.

        self.menuleri_olustur()

    def menuleri_olustur(self):

        menubar = self.menuBar()
        dosya = menubar.addMenu("Dosya")

        dosya_ac = QAction("Dosya Aç",self)
        dosya_ac.setShortcut("Ctrl+O")

        dosya_kaydet = QAction("Dosya Kaydet", self)
        dosya_kaydet.setShortcut("Ctrl+S")

        temizle = QAction("Temizle", self)
        temizle.setShortcut("Ctrl+D")

        cikis = QAction("Çıkış", self)
        cikis.setShortcut("Ctrl+Q")


        dosya.addAction(dosya_ac)
        dosya.addAction(dosya_kaydet)
        dosya.addAction(temizle)
        dosya.addAction(cikis)

        dosya.triggered.connect(self.response)

        self.setWindowTitle("Metin Editörü")

        self.show()

    def response(self,action): #biz aksiyon diye bir parametre göndermiyoruz fakat python bunu kendi gönderiyor(self gibi.)

        if action.text() == "Dosya Aç" :
            self.pencere.dosya_ac()

        elif action.text() == "Dosya Kaydet" :
            self.pencere.dosya_kaydet()

        elif action.text() == "Temizle" :
            self.pencere.yaziyi_temizle()

        elif action.text() == "Çıkış":
            qApp.quit()

app = QApplication(sys.argv)

menu = Menu()

sys.exit(app.exec_())
